"""
AI Profit Optimizer
Module t·ªëi ∆∞u h√≥a l·ª£i nhu·∫≠n d·ª±a tr√™n AI ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u 3% l·ª£i nhu·∫≠n h√†ng ng√†y
"""

import numpy as np
import pandas as pd
import logging
import os
import time
import json
from typing import Dict, List, Tuple, Optional, Union, Any
from datetime import datetime, timedelta
import joblib
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.preprocessing import StandardScaler
import lightgbm as lgb
import matplotlib.pyplot as plt
import requests
from ccxt.base.errors import AuthenticationError, NetworkError
import talib.abstract as ta
from dotenv import load_dotenv
import traceback
import sys
import openai
from threading import Lock

# C·ªë g·∫Øng load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("ai_profit_optimizer.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("ai_profit_optimizer")

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi tr·∫°ng th√°i
class TrackingState:
    def __init__(self):
        self.daily_profit_pct = 0.0
        self.daily_profit_target_pct = 3.0
        self.num_trades_today = 0
        self.max_trades_per_day = 20
        self.active_pairs = []
        self.max_active_pairs = 3
        self.potential_trades = []
        self.last_update_time = datetime.now()
        self.pairs_in_watchlist = []
        self.market_conditions = {
            "trend": "neutral",  # neutral, bullish, bearish
            "volatility": "medium",  # low, medium, high
            "sentiment": 0.0,  # -1 to 1 scale
            "risk_level": "medium"  # low, medium, high
        }
        self.lock = Lock()  # Thread lock for concurrency
        self.todays_trades = []
        self.profitable_trades = 0
        self.losing_trades = 0
        self.is_target_reached = False
        self.ai_enabled = True
        self.ai_prediction_cache = {}
        self.opportunity_score_threshold = 75
        self.opportunity_score_threshold_after_target = 85

    def update_daily_profit(self, profit_pct):
        with self.lock:
            self.daily_profit_pct += profit_pct
            if self.daily_profit_pct >= self.daily_profit_target_pct:
                self.is_target_reached = True
                logger.info(f"üéØ M·ª•c ti√™u l·ª£i nhu·∫≠n h√†ng ng√†y {self.daily_profit_target_pct}% ƒë√£ ƒë·∫°t ƒë∆∞·ª£c!")
            
    def reset_daily_tracking(self):
        with self.lock:
            self.daily_profit_pct = 0.0
            self.num_trades_today = 0
            self.todays_trades = []
            self.profitable_trades = 0
            self.losing_trades = 0
            self.is_target_reached = False
            self.ai_prediction_cache = {}
            self.last_update_time = datetime.now()
            
    def add_trade(self, trade_info):
        with self.lock:
            self.todays_trades.append(trade_info)
            self.num_trades_today += 1
            if trade_info['profit_pct'] > 0:
                self.profitable_trades += 1
            else:
                self.losing_trades += 1
            
    def can_open_new_trade(self, pair, opportunity_score):
        with self.lock:
            # Ki·ªÉm tra xem ƒë√£ ƒë·∫°t m·ª•c ti√™u l·ª£i nhu·∫≠n h√†ng ng√†y ch∆∞a
            if self.is_target_reached:
                # N·∫øu ƒë√£ ƒë·∫°t m·ª•c ti√™u, ch·ªâ m·ªü trade v·ªõi opportunity score cao h∆°n ng∆∞·ª°ng
                if opportunity_score < self.opportunity_score_threshold_after_target:
                    return False, f"ƒê√£ ƒë·∫°t m·ª•c ti√™u l·ª£i nhu·∫≠n {self.daily_profit_target_pct}%, c·∫ßn score >= {self.opportunity_score_threshold_after_target}"
            else:
                # Ch∆∞a ƒë·∫°t m·ª•c ti√™u, √°p d·ª•ng ng∆∞·ª°ng th√¥ng th∆∞·ªùng
                if opportunity_score < self.opportunity_score_threshold:
                    return False, f"Opportunity score {opportunity_score} th·∫•p h∆°n ng∆∞·ª°ng {self.opportunity_score_threshold}"
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng trade t·ªëi ƒëa m·ªói ng√†y
            if self.num_trades_today >= self.max_trades_per_day:
                return False, f"ƒê√£ ƒë·∫°t s·ªë l∆∞·ª£ng trade t·ªëi ƒëa trong ng√†y ({self.max_trades_per_day})"
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng c·∫∑p ti·ªÅn ƒëang giao d·ªãch
            if len(self.active_pairs) >= self.max_active_pairs and pair not in self.active_pairs:
                return False, f"ƒê√£ ƒë·∫°t s·ªë l∆∞·ª£ng c·∫∑p ti·ªÅn giao d·ªãch ƒë·ªìng th·ªùi t·ªëi ƒëa ({self.max_active_pairs})"
            
            return True, "C√≥ th·ªÉ m·ªü trade m·ªõi"

# Kh·ªüi t·∫°o tr·∫°ng th√°i to√†n c·ª•c
state = TrackingState()

class AIModel:
    """Class qu·∫£n l√Ω c√°c m√¥ h√¨nh AI d√πng trong t·ªëi ∆∞u h√≥a l·ª£i nhu·∫≠n"""
    
    def __init__(self, model_dir="./models"):
        self.model_dir = model_dir
        self.profit_predictor = None
        self.entry_classifier = None
        self.exit_classifier = None
        self.scaler = None
        self.features = None
        self.load_models()
        
    def load_models(self):
        """Load c√°c m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán t·ª´ ƒëƒ©a"""
        try:
            # T·∫°o th∆∞ m·ª•c ch·ª©a model n·∫øu ch∆∞a t·ªìn t·∫°i
            os.makedirs(self.model_dir, exist_ok=True)
            
            if os.path.exists(f"{self.model_dir}/profit_predictor.pkl"):
                self.profit_predictor = joblib.load(f"{self.model_dir}/profit_predictor.pkl")
                logger.info("ƒê√£ t·∫£i m√¥ h√¨nh profit_predictor")
            
            if os.path.exists(f"{self.model_dir}/entry_classifier.pkl"):
                self.entry_classifier = joblib.load(f"{self.model_dir}/entry_classifier.pkl")
                logger.info("ƒê√£ t·∫£i m√¥ h√¨nh entry_classifier")
            
            if os.path.exists(f"{self.model_dir}/exit_classifier.pkl"):
                self.exit_classifier = joblib.load(f"{self.model_dir}/exit_classifier.pkl")
                logger.info("ƒê√£ t·∫£i m√¥ h√¨nh exit_classifier")
            
            if os.path.exists(f"{self.model_dir}/scaler.pkl"):
                self.scaler = joblib.load(f"{self.model_dir}/scaler.pkl")
                logger.info("ƒê√£ t·∫£i scaler")
            
            if os.path.exists(f"{self.model_dir}/features.json"):
                with open(f"{self.model_dir}/features.json", "r") as f:
                    self.features = json.load(f)
                logger.info(f"ƒê√£ t·∫£i danh s√°ch {len(self.features)} features")
            
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
            logger.exception(e)
    
    def save_models(self):
        """L∆∞u c√°c m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán ra ƒëƒ©a"""
        try:
            # T·∫°o th∆∞ m·ª•c ch·ª©a model n·∫øu ch∆∞a t·ªìn t·∫°i
            os.makedirs(self.model_dir, exist_ok=True)
            
            if self.profit_predictor:
                joblib.dump(self.profit_predictor, f"{self.model_dir}/profit_predictor.pkl")
            
            if self.entry_classifier:
                joblib.dump(self.entry_classifier, f"{self.model_dir}/entry_classifier.pkl")
            
            if self.exit_classifier:
                joblib.dump(self.exit_classifier, f"{self.model_dir}/exit_classifier.pkl")
            
            if self.scaler:
                joblib.dump(self.scaler, f"{self.model_dir}/scaler.pkl")
            
            if self.features:
                with open(f"{self.model_dir}/features.json", "w") as f:
                    json.dump(self.features, f)
            
            logger.info("ƒê√£ l∆∞u t·∫•t c·∫£ m√¥ h√¨nh")
            
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u m√¥ h√¨nh: {str(e)}")
            logger.exception(e)
    
    def train_profit_predictor(self, X_train, y_train):
        """Hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n l·ª£i nhu·∫≠n"""
        try:
            # S·ª≠ d·ª•ng LightGBM cho d·ª± ƒëo√°n l·ª£i nhu·∫≠n
            model = lgb.LGBMRegressor(
                n_estimators=100,
                learning_rate=0.05,
                max_depth=5,
                num_leaves=32,
                subsample=0.8,
                colsample_bytree=0.8,
                random_state=42
            )
            
            model.fit(X_train, y_train)
            self.profit_predictor = model
            
            # ƒê√°nh gi√° quan tr·ªçng c·ªßa features
            feature_importance = model.feature_importances_
            features_df = pd.DataFrame({
                'Feature': X_train.columns,
                'Importance': feature_importance
            }).sort_values(by='Importance', ascending=False)
            
            logger.info(f"Top 10 features quan tr·ªçng nh·∫•t cho d·ª± ƒëo√°n l·ª£i nhu·∫≠n:\n{features_df.head(10)}")
            
            # L∆∞u m√¥ h√¨nh
            self.save_models()
            return model
            
        except Exception as e:
            logger.error(f"L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n l·ª£i nhu·∫≠n: {str(e)}")
            logger.exception(e)
            return None
    
    def train_entry_classifier(self, X_train, y_train):
        """Hu·∫•n luy·ªán m√¥ h√¨nh ph√¢n lo·∫°i ƒëi·ªÉm v√†o l·ªánh t·ªët/x·∫•u"""
        try:
            # S·ª≠ d·ª•ng LightGBM cho ph√¢n lo·∫°i ƒëi·ªÉm v√†o l·ªánh
            model = lgb.LGBMClassifier(
                n_estimators=100,
                learning_rate=0.05,
                max_depth=5,
                num_leaves=32,
                subsample=0.8,
                colsample_bytree=0.8,
                class_weight='balanced',
                random_state=42
            )
            
            model.fit(X_train, y_train)
            self.entry_classifier = model
            
            # ƒê√°nh gi√° quan tr·ªçng c·ªßa features
            feature_importance = model.feature_importances_
            features_df = pd.DataFrame({
                'Feature': X_train.columns,
                'Importance': feature_importance
            }).sort_values(by='Importance', ascending=False)
            
            logger.info(f"Top 10 features quan tr·ªçng nh·∫•t cho ph√¢n lo·∫°i ƒëi·ªÉm v√†o l·ªánh:\n{features_df.head(10)}")
            
            # L∆∞u m√¥ h√¨nh
            self.save_models()
            return model
            
        except Exception as e:
            logger.error(f"L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh ph√¢n lo·∫°i ƒëi·ªÉm v√†o l·ªánh: {str(e)}")
            logger.exception(e)
            return None
    
    def predict_profit(self, features_df):
        """D·ª± ƒëo√°n l·ª£i nhu·∫≠n ti·ªÅm nƒÉng t·ª´ m·ªôt trade"""
        try:
            if self.profit_predictor is None:
                logger.warning("Ch∆∞a c√≥ m√¥ h√¨nh d·ª± ƒëo√°n l·ª£i nhu·∫≠n ƒë∆∞·ª£c t·∫£i")
                return None
            
            # Chu·∫©n h√≥a features
            if self.scaler is not None:
                features_scaled = self.scaler.transform(features_df)
                features_df = pd.DataFrame(features_scaled, columns=features_df.columns)
            
            # D·ª± ƒëo√°n
            predicted_profit = self.profit_predictor.predict(features_df)
            return predicted_profit
            
        except Exception as e:
            logger.error(f"L·ªói khi d·ª± ƒëo√°n l·ª£i nhu·∫≠n: {str(e)}")
            logger.exception(e)
            return None
    
    def predict_entry_quality(self, features_df):
        """D·ª± ƒëo√°n ch·∫•t l∆∞·ª£ng c·ªßa ƒëi·ªÉm v√†o l·ªánh (x√°c su·∫•t th√†nh c√¥ng)"""
        try:
            if self.entry_classifier is None:
                logger.warning("Ch∆∞a c√≥ m√¥ h√¨nh ph√¢n lo·∫°i ƒëi·ªÉm v√†o l·ªánh ƒë∆∞·ª£c t·∫£i")
                return None
            
            # Chu·∫©n h√≥a features
            if self.scaler is not None:
                features_scaled = self.scaler.transform(features_df)
                features_df = pd.DataFrame(features_scaled, columns=features_df.columns)
            
            # D·ª± ƒëo√°n x√°c su·∫•t
            entry_proba = self.entry_classifier.predict_proba(features_df)[:, 1]  # L·∫•y x√°c su·∫•t class 1 (good entry)
            return entry_proba
            
        except Exception as e:
            logger.error(f"L·ªói khi d·ª± ƒëo√°n ch·∫•t l∆∞·ª£ng ƒëi·ªÉm v√†o l·ªánh: {str(e)}")
            logger.exception(e)
            return None
    
    def calculate_opportunity_score(self, dataframe, pair, current_time, timeframe="15m"):
        """
        T√≠nh ƒëi·ªÉm c∆° h·ªôi giao d·ªãch (opportunity score) cho m·ªôt c·∫∑p ti·ªÅn
        
        Thang ƒëi·ªÉm 0-100:
        - < 50: T√≠n hi·ªáu y·∫øu, b·ªè qua
        - 50-75: T√≠n hi·ªáu trung b√¨nh, xem x√©t n·∫øu kh√¥ng c√≥ t√πy ch·ªçn t·ªët h∆°n
        - 75-90: T√≠n hi·ªáu t·ªët, xem x√©t v√†o l·ªánh
        - > 90: T√≠n hi·ªáu r·∫•t t·ªët, kh·∫£ nƒÉng cao ƒëem l·∫°i l·ª£i nhu·∫≠n
        """
        try:
            # Ki·ªÉm tra cache
            cache_key = f"{pair}_{timeframe}_{current_time.timestamp()}"
            if cache_key in state.ai_prediction_cache:
                return state.ai_prediction_cache[cache_key]
            
            # Chuy·ªÉn ƒë·ªïi dataframe th√†nh features
            features_df = self._extract_features(dataframe)
            
            if features_df is None or len(features_df) == 0:
                return 0
            
            # L·∫•y last row l√†m features hi·ªán t·∫°i
            current_features = features_df.iloc[-1:].copy()
            
            # Component 1: D·ª± ƒëo√°n l·ª£i nhu·∫≠n ti·ªÅm nƒÉng (0-40 ƒëi·ªÉm)
            profit_score = 0
            if self.profit_predictor is not None:
                predicted_profit = self.predict_profit(current_features)
                if predicted_profit is not None and len(predicted_profit) > 0:
                    # Scale predicted profit to 0-40 points
                    # V√≠ d·ª• 3% profit -> 40 ƒëi·ªÉm
                    # 0% -> 0 ƒëi·ªÉm
                    # <0% -> 0 ƒëi·ªÉm
                    profit_pct = predicted_profit[0]
                    profit_score = min(40, max(0, profit_pct * 40 / 3.0))
            
            # Component 2: Ch·∫•t l∆∞·ª£ng ƒëi·ªÉm v√†o l·ªánh (0-40 ƒëi·ªÉm)
            entry_score = 0
            if self.entry_classifier is not None:
                entry_proba = self.predict_entry_quality(current_features)
                if entry_proba is not None and len(entry_proba) > 0:
                    # X√°c su·∫•t success * 40 ƒëi·ªÉm
                    entry_score = entry_proba[0] * 40
            
            # Component 3: ƒêi·ªÅu ki·ªán th·ªã tr∆∞·ªùng v√† v·ªã th·∫ø hi·ªán t·∫°i (0-20 ƒëi·ªÉm)
            market_score = self._calculate_market_conditions_score(dataframe, pair)
            
            # T√≠nh t·ªïng ƒëi·ªÉm
            total_score = profit_score + entry_score + market_score
            
            # Th√™m v√†o cache
            state.ai_prediction_cache[cache_key] = total_score
            
            logger.info(f"Opportunity Score cho {pair}: {total_score:.2f} (Profit: {profit_score:.2f}, Entry: {entry_score:.2f}, Market: {market_score:.2f})")
            
            return total_score
            
        except Exception as e:
            logger.error(f"L·ªói khi t√≠nh opportunity score: {str(e)}")
            logger.exception(e)
            return 0
    
    def _extract_features(self, dataframe):
        """Tr√≠ch xu·∫•t features t·ª´ dataframe ƒë·ªÉ ƒë∆∞a v√†o m√¥ h√¨nh"""
        try:
            df = dataframe.copy()
            
            # Th√™m c√°c ch·ªâ b√°o k·ªπ thu·∫≠t c∆° b·∫£n
            # RSI
            df['rsi'] = ta.RSI(df['close'], timeperiod=14)
            df['rsi_6'] = ta.RSI(df['close'], timeperiod=6)
            
            # MACD
            macd = ta.MACD(df['close'], fastperiod=12, slowperiod=26, signalperiod=9)
            df['macd'] = macd['macd']
            df['macdsignal'] = macd['macdsignal']
            df['macdhist'] = macd['macdhist']
            
            # Bollinger Bands
            upperband, middleband, lowerband = ta.BBANDS(df['close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)
            df['bb_upper'] = upperband
            df['bb_middle'] = middleband
            df['bb_lower'] = lowerband
            df['bb_width'] = (upperband - lowerband) / middleband
            df['bb_percent'] = (df['close'] - lowerband) / (upperband - lowerband)
            
            # EMAs
            for period in [5, 8, 13, 21, 34, 55, 89, 200]:
                df[f'ema_{period}'] = ta.EMA(df['close'], timeperiod=period)
            
            # ƒê·∫∑c tr∆∞ng v·ªÅ kh·ªëi l∆∞·ª£ng
            df['volume_mean_20'] = df['volume'].rolling(window=20).mean()
            df['volume_ratio'] = df['volume'] / df['volume_mean_20']
            
            # ADX
            df['adx'] = ta.ADX(df['high'], df['low'], df['close'], timeperiod=14)
            
            # ATR
            df['atr'] = ta.ATR(df['high'], df['low'], df['close'], timeperiod=14)
            df['atr_percent'] = df['atr'] / df['close'] * 100
            
            # Stochastic
            slowk, slowd = ta.STOCH(df['high'], df['low'], df['close'], fastk_period=5, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)
            df['stoch_k'] = slowk
            df['stoch_d'] = slowd
            
            # Ichimoku
            high_9 = df['high'].rolling(window=9).max()
            low_9 = df['low'].rolling(window=9).min()
            df['tenkan_sen'] = (high_9 + low_9) / 2  # Conversion line
            
            high_26 = df['high'].rolling(window=26).max()
            low_26 = df['low'].rolling(window=26).min()
            df['kijun_sen'] = (high_26 + low_26) / 2  # Base line
            
            # Candle patterns
            df['body_size'] = abs(df['close'] - df['open'])
            df['shadow_upper'] = df['high'] - df[['close', 'open']].max(axis=1)
            df['shadow_lower'] = df[['close', 'open']].min(axis=1) - df['low']
            df['body_percentage'] = df['body_size'] / (df['high'] - df['low'])
            
            # ƒê·∫∑c tr∆∞ng momentum
            df['momentum'] = df['close'].pct_change(periods=14) * 100
            
            # Price action features
            df['price_up'] = (df['close'] > df['open']).astype(int)
            df['consecutive_ups'] = df['price_up'].rolling(window=3).sum()
            
            # X·ª≠ l√Ω gi√° tr·ªã NaN
            df = df.dropna()
            
            if len(df) == 0:
                return None
            
            # Ch·ªçn features t·ª´ danh s√°ch n·∫øu ƒë√£ ƒë∆∞·ª£c x√°c ƒë·ªãnh
            if self.features is not None:
                available_features = [f for f in self.features if f in df.columns]
                return df[available_features]
            
            # N·∫øu ch∆∞a c√≥ danh s√°ch features, h√£y s·ª≠ d·ª•ng t·∫•t c·∫£
            features_to_exclude = ['date', 'open_time']
            features_cols = [col for col in df.columns if col not in features_to_exclude]
            
            return df[features_cols]
            
        except Exception as e:
            logger.error(f"L·ªói khi tr√≠ch xu·∫•t features: {str(e)}")
            logger.exception(e)
            return None
    
    def _calculate_market_conditions_score(self, dataframe, pair):
        """T√≠nh ƒëi·ªÉm cho ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng hi·ªán t·∫°i"""
        try:
            # L·∫•y 100 n·∫øn cu·ªëi c√πng ƒë·ªÉ ph√¢n t√≠ch
            df = dataframe.tail(100).copy()
            
            score = 10  # ƒêi·ªÉm c∆° b·∫£n
            
            # 1. X√°c ƒë·ªãnh xu h∆∞·ªõng
            ema_8 = df['close'].ewm(span=8, adjust=False).mean()
            ema_21 = df['close'].ewm(span=21, adjust=False).mean()
            
            trend = 'neutral'
            if ema_8.iloc[-1] > ema_21.iloc[-1] and ema_8.iloc[-2] > ema_21.iloc[-2]:
                trend = 'bullish'
                score += 3
            elif ema_8.iloc[-1] < ema_21.iloc[-1] and ema_8.iloc[-2] < ema_21.iloc[-2]:
                trend = 'bearish'
                score -= 2
            
            # 2. X√°c ƒë·ªãnh volatility
            atr = ta.ATR(df['high'], df['low'], df['close'], timeperiod=14)
            atr_pct = atr.iloc[-1] / df['close'].iloc[-1] * 100
            
            volatility = 'medium'
            if atr_pct < 1.0:
                volatility = 'low'
                score -= 1
            elif atr_pct > 3.0:
                volatility = 'high'
                score -= 2
            
            # 3. Ki·ªÉm tra volume
            volume_ratio = df['volume'].iloc[-1] / df['volume'].rolling(20).mean().iloc[-1]
            if volume_ratio > 1.5:
                score += 2
            elif volume_ratio < 0.7:
                score -= 1
            
            # 4. Ki·ªÉm tra n·∫øu pair ƒë√£ c√≥ trong danh s√°ch theo d√µi
            if pair in state.pairs_in_watchlist:
                score += 2
            
            # 5. Ki·ªÉm tra RSI
            rsi = ta.RSI(df['close'], timeperiod=14).iloc[-1]
            if 30 <= rsi <= 70:
                score += 2
            elif rsi < 30:
                # Oversold
                if trend == 'bullish':
                    score += 3  # Oversold + xu h∆∞·ªõng tƒÉng: c∆° h·ªôi t·ªët
                else:
                    score += 1
            elif rsi > 70:
                # Overbought
                if trend == 'bearish':
                    score += 3  # Overbought + xu h∆∞·ªõng gi·∫£m: c∆° h·ªôi t·ªët
                else:
                    score += 1
            
            # ƒê·∫£m b·∫£o score trong kho·∫£ng 0-20
            market_score = max(0, min(20, score))
            
            # C·∫≠p nh·∫≠t market conditions trong state
            state.market_conditions['trend'] = trend
            state.market_conditions['volatility'] = volatility
            
            return market_score
            
        except Exception as e:
            logger.error(f"L·ªói khi t√≠nh ƒëi·ªÉm ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng: {str(e)}")
            logger.exception(e)
            return 10  # ƒêi·ªÉm m·∫∑c ƒë·ªãnh

class ProfitOptimizer:
    """
    Class ch√≠nh qu·∫£n l√Ω vi·ªác t·ªëi ∆∞u h√≥a l·ª£i nhu·∫≠n h√†ng ng√†y
    """
    
    def __init__(self, exchange_config=None, backtest_data_dir="./backtest_data"):
        self.exchange_config = exchange_config
        self.backtest_data_dir = backtest_data_dir
        self.ai_model = AIModel()
        self.current_pairs = []
        self.last_analysis_time = datetime.now() - timedelta(hours=1)
        self.min_trades_needed = self._calculate_min_trades_needed()
        
        # Initialize directories
        os.makedirs(backtest_data_dir, exist_ok=True)
        
        # Fetch initial market data
        self._update_market_data()
    
    def _calculate_min_trades_needed(self):
        """
        T√≠nh s·ªë l∆∞·ª£ng giao d·ªãch t·ªëi thi·ªÉu c·∫ßn thi·∫øt ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u 3% h√†ng ng√†y
        d·ª±a tr√™n d·ªØ li·ªáu qu√° kh·ª© v·ªÅ l·ª£i nhu·∫≠n trung b√¨nh m·ªói giao d·ªãch
        """
        # Default if no data: assuming 0.5% profit per trade, need 6 trades
        avg_profit_per_trade = 0.5
        
        # TODO: Ph√¢n t√≠ch d·ªØ li·ªáu qu√° kh·ª© ƒë·ªÉ c√≥ ∆∞·ªõc t√≠nh ch√≠nh x√°c h∆°n
        
        min_trades = max(1, round(state.daily_profit_target_pct / avg_profit_per_trade))
        logger.info(f"C·∫ßn kho·∫£ng {min_trades} giao d·ªãch ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u {state.daily_profit_target_pct}% m·ªói ng√†y")
        
        return min_trades
    
    def _update_market_data(self):
        """C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªã tr∆∞·ªùng cho c√°c c·∫∑p ti·ªÅn ƒëang theo d√µi"""
        try:
            # Th√™m code c·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ exchange
            # ƒê√¢y ch·ªâ l√† ph·∫ßn gi·∫£ l·∫≠p, c·∫ßn thay th·∫ø b·∫±ng API th·ª±c t·∫ø
            logger.info("ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªã tr∆∞·ªùng...")
            
            # Gi·∫£ l·∫≠p c·∫≠p nh·∫≠t danh s√°ch c·∫∑p ti·ªÅn theo d√µi
            if not state.pairs_in_watchlist:
                state.pairs_in_watchlist = [
                    "BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT", "XRP/USDT",
                    "ADA/USDT", "AVAX/USDT", "DOT/USDT", "DOGE/USDT", "SHIB/USDT"
                ]
            
            self.last_analysis_time = datetime.now()
            logger.info(f"ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªã tr∆∞·ªùng cho {len(state.pairs_in_watchlist)} c·∫∑p ti·ªÅn")
            
        except Exception as e:
            logger.error(f"L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªã tr∆∞·ªùng: {str(e)}")
            logger.exception(e)
    
    def analyze_daily_profit_needed(self):
        """
        Ph√¢n t√≠ch l·ª£i nhu·∫≠n c·∫ßn thi·∫øt ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u 3% h√†ng ng√†y
        X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng v√† lo·∫°i giao d·ªãch c·∫ßn thi·∫øt
        """
        try:
            # C·∫≠p nh·∫≠t th√¥ng tin th·ªã tr∆∞·ªùng n·∫øu ƒë√£ qu√° 1 gi·ªù t·ª´ l·∫ßn c·∫≠p nh·∫≠t tr∆∞·ªõc
            if (datetime.now() - self.last_analysis_time).seconds > 3600:
                self._update_market_data()
            
            # T√¨nh tr·∫°ng l·ª£i nhu·∫≠n hi·ªán t·∫°i
            current_profit = state.daily_profit_pct
            target_profit = state.daily_profit_target_pct
            remaining_profit = max(0, target_profit - current_profit)
            
            # N·∫øu ƒë√£ ƒë·∫°t m·ª•c ti√™u, b√°o c√°o v√† tho√°t
            if remaining_profit == 0:
                logger.info(f"M·ª•c ti√™u l·ª£i nhu·∫≠n h√†ng ng√†y {target_profit}% ƒë√£ ƒë·∫°t ƒë∆∞·ª£c!")
                
                # V·∫´n t√≠nh to√°n c√°c ch·ªâ s·ªë ƒë·ªÉ chu·∫©n b·ªã cho giao d·ªãch trong t∆∞∆°ng lai
                avg_profit_per_trade = 0.5  # Gi·∫£ ƒë·ªãnh 0.5% m·ªói trade
                remaining_trades = 0
                confidence_level = 100  # ƒê·ªô tin c·∫≠y t·ªëi ƒëa v√¨ ƒë√£ ƒë·∫°t m·ª•c ti√™u
                
                return {
                    "status": "target_reached",
                    "current_profit": current_profit,
                    "target_profit": target_profit,
                    "remaining_profit": remaining_profit,
                    "remaining_trades_needed": remaining_trades,
                    "confidence_level": confidence_level,
                    "recommendation": "ƒê√£ ƒë·∫°t m·ª•c ti√™u l·ª£i nhu·∫≠n h√†ng ng√†y, ch·ªâ n√™n th·ª±c hi·ªán c√°c giao d·ªãch c√≥ opportunity score > 85"
                }
            
            # T√≠nh to√°n s·ªë l∆∞·ª£ng giao d·ªãch c√≤n c·∫ßn ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u
            avg_profit_this_far = 0
            if state.num_trades_today > 0:
                avg_profit_this_far = current_profit / state.num_trades_today
            
            # S·ª≠ d·ª•ng d·ªØ li·ªáu qu√° kh·ª© ho·∫∑c hi·ªán t·∫°i ƒë·ªÉ ∆∞·ªõc t√≠nh l·ª£i nhu·∫≠n trung b√¨nh
            if avg_profit_this_far > 0:
                avg_profit_per_trade = avg_profit_this_far
            else:
                # Assume 0.5% average profit if no data
                avg_profit_per_trade = 0.5
            
            remaining_trades = max(1, round(remaining_profit / avg_profit_per_trade))
            
            # T√≠nh to√°n th·ªùi gian c√≤n l·∫°i trong ng√†y
            now = datetime.now()
            end_of_day = datetime(now.year, now.month, now.day, 23, 59, 59)
            hours_remaining = (end_of_day - now).seconds / 3600
            
            # T√≠nh to√°n ƒë·ªô tin c·∫≠y d·ª±a tr√™n kh·∫£ nƒÉng ho√†n th√†nh m·ª•c ti√™u
            trades_per_hour_needed = remaining_trades / max(1, hours_remaining)
            
            confidence_level = 100
            if trades_per_hour_needed > 3:
                # Qu√° kh√≥ ƒë·ªÉ c√≥ h∆°n 3 giao d·ªãch m·ªói gi·ªù
                confidence_level = 50
            elif trades_per_hour_needed > 2:
                confidence_level = 70
            elif trades_per_hour_needed > 1:
                confidence_level = 85
            
            # Chu·∫©n b·ªã ƒë·ªÅ xu·∫•t
            recommendation = f"C·∫ßn th√™m {remaining_trades} giao d·ªãch v·ªõi l·ª£i nhu·∫≠n trung b√¨nh {avg_profit_per_trade:.2f}% ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u {target_profit}%"
            
            if confidence_level < 70:
                recommendation += ". Kh√≥ c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u h√¥m nay, n√™n xem x√©t c√°c giao d·ªãch v·ªõi opportunity score cao h∆°n 80"
            
            # ∆Øu ti√™n c√°c c·∫∑p ti·ªÅn d·ª±a tr√™n opportunity score
            priority_pairs = self._get_priority_pairs()
            
            return {
                "status": "in_progress",
                "current_profit": current_profit,
                "target_profit": target_profit,
                "remaining_profit": remaining_profit,
                "avg_profit_per_trade": avg_profit_per_trade,
                "remaining_trades_needed": remaining_trades,
                "trades_per_hour_needed": trades_per_hour_needed,
                "hours_remaining": hours_remaining,
                "confidence_level": confidence_level,
                "recommendation": recommendation,
                "priority_pairs": priority_pairs
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch l·ª£i nhu·∫≠n h√†ng ng√†y: {str(e)}")
            logger.exception(e)
            return {
                "status": "error",
                "error": str(e)
            }
    
    def _get_priority_pairs(self):
        """X√°c ƒë·ªãnh c√°c c·∫∑p ti·ªÅn ∆∞u ti√™n d·ª±a tr√™n opportunity score"""
        try:
            # ƒê√¢y l√† ph·∫ßn gi·∫£ l·∫≠p, c·∫ßn thay th·∫ø b·∫±ng t√≠nh to√°n th·ª±c t·∫ø
            priority_pairs = []
            
            # Gi·∫£ l·∫≠p opportunity score cho c√°c c·∫∑p ti·ªÅn trong watchlist
            for pair in state.pairs_in_watchlist:
                # Random score from 0-100 for simulation
                score = np.random.uniform(0, 100)
                priority_pairs.append({
                    "pair": pair,
                    "opportunity_score": score,
                    "estimated_profit": score * 0.05 / 100  # 0.05% profit for each score point
                })
            
            # S·∫Øp x·∫øp theo opportunity score gi·∫£m d·∫ßn
            priority_pairs = sorted(priority_pairs, key=lambda x: x["opportunity_score"], reverse=True)
            
            # Ch·ªâ gi·ªØ top 5
            return priority_pairs[:5]
            
        except Exception as e:
            logger.error(f"L·ªói khi x√°c ƒë·ªãnh c·∫∑p ti·ªÅn ∆∞u ti√™n: {str(e)}")
            logger.exception(e)
            return []
    
    def get_trade_recommendation(self, dataframe, pair, current_time, side="long", timeframe="15m"):
        """
        ƒê∆∞a ra khuy·∫øn ngh·ªã giao d·ªãch d·ª±a tr√™n d·ªØ li·ªáu hi·ªán t·∫°i
        v√† c√°c m√¥ h√¨nh AI
        
        Returns:
            dict: Th√¥ng tin khuy·∫øn ngh·ªã giao d·ªãch
        """
        try:
            # Ki·ªÉm tra t√¨nh tr·∫°ng m·ª•c ti√™u l·ª£i nhu·∫≠n h√†ng ng√†y
            daily_profit_status = self.analyze_daily_profit_needed()
            
            # T√≠nh opportunity score cho c·∫∑p ti·ªÅn n√†y
            opportunity_score = self.ai_model.calculate_opportunity_score(dataframe, pair, current_time, timeframe)
            
            # Ki·ªÉm tra xem c√≥ th·ªÉ m·ªü giao d·ªãch m·ªõi kh√¥ng
            can_open, reason = state.can_open_new_trade(pair, opportunity_score)
            
            if not can_open:
                return {
                    "pair": pair,
                    "timeframe": timeframe,
                    "side": side,
                    "recommendation": "no_trade",
                    "opportunity_score": opportunity_score,
                    "reason": reason,
                    "daily_profit_status": daily_profit_status
                }
            
            # ∆Ø·ªõc t√≠nh l·ª£i nhu·∫≠n d·ª± ki·∫øn
            estimated_profit = 0.5  # Default 0.5%
            if opportunity_score > 90:
                estimated_profit = 1.5
            elif opportunity_score > 80:
                estimated_profit = 1.0
            elif opportunity_score > 70:
                estimated_profit = 0.7
            
            # T√≠nh to√°n confidence level (ƒë·ªô tin c·∫≠y)
            confidence_level = min(opportunity_score, 100)
            
            # X√°c ƒë·ªãnh ƒë√≤n b·∫©y d·ª±a tr√™n confidence level
            recommended_leverage = 3  # Default
            if confidence_level > 90:
                recommended_leverage = 6
            elif confidence_level > 80:
                recommended_leverage = 5
            elif confidence_level > 70:
                recommended_leverage = 4
            
            # Khuy·∫øn ngh·ªã
            if opportunity_score > state.opportunity_score_threshold_after_target:
                recommendation = "strong_entry"
                action = "M·ªü l·ªánh v·ªõi ƒë√≤n b·∫©y cao"
            elif opportunity_score > state.opportunity_score_threshold:
                recommendation = "entry"
                action = "M·ªü l·ªánh v·ªõi ƒë√≤n b·∫©y trung b√¨nh"
            else:
                recommendation = "monitor"
                action = "Theo d√µi, ch∆∞a n√™n v√†o l·ªánh"
            
            # T√≠nh to√°n stoploss ƒë·ªÅ xu·∫•t
            # Gi·∫£ ƒë·ªãnh 1% of capital risk per trade
            risk_per_trade = 0.01  # 1%
            price = dataframe['close'].iloc[-1]
            
            if side == "long":
                sl_pct = 3.0  # 3% stoploss
                if opportunity_score > 90:
                    sl_pct = 2.0  # T√≠n hi·ªáu m·∫°nh c√≥ th·ªÉ d√πng stoploss kh√≠t h∆°n
                
                sl_price = price * (1 - sl_pct/100)
                
            else:  # short
                sl_pct = 3.0  # 3% stoploss
                if opportunity_score > 90:
                    sl_pct = 2.0
                
                sl_price = price * (1 + sl_pct/100)
            
            # T√≠nh l∆∞·ª£ng v·ªën ƒë·ªÉ ƒë·∫ßu t∆∞
            capital_fraction = min(0.3, risk_per_trade / (sl_pct/100))  # Max 30% of capital
            
            return {
                "pair": pair,
                "timeframe": timeframe,
                "side": side,
                "current_price": price,
                "recommendation": recommendation,
                "action": action,
                "opportunity_score": opportunity_score,
                "confidence_level": confidence_level,
                "estimated_profit": estimated_profit,
                "recommended_leverage": recommended_leverage,
                "stoploss_percentage": sl_pct,
                "stoploss_price": sl_price,
                "capital_allocation": capital_fraction,
                "daily_profit_status": daily_profit_status
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y khuy·∫øn ngh·ªã giao d·ªãch: {str(e)}")
            logger.exception(e)
            return {
                "pair": pair,
                "timeframe": timeframe,
                "side": side,
                "recommendation": "error",
                "error": str(e)
            }
    
    def get_exit_recommendation(self, dataframe, pair, current_time, entry_price, side="long", 
                              current_profit=0.0, timeframe="15m"):
        """
        ƒê∆∞a ra khuy·∫øn ngh·ªã tho√°t l·ªánh
        
        Args:
            dataframe: D·ªØ li·ªáu gi√°
            pair: C·∫∑p ti·ªÅn
            current_time: Th·ªùi gian hi·ªán t·∫°i
            entry_price: Gi√° v√†o l·ªánh
            side: 'long' ho·∫∑c 'short'
            current_profit: L·ª£i nhu·∫≠n hi·ªán t·∫°i
            timeframe: Khung th·ªùi gian
            
        Returns:
            dict: Th√¥ng tin khuy·∫øn ngh·ªã tho√°t l·ªánh
        """
        try:
            # Cung c·∫•p gi√° hi·ªán t·∫°i ƒë·ªÉ t√≠nh l·ª£i nhu·∫≠n n·∫øu c·∫ßn
            current_price = dataframe['close'].iloc[-1]
            
            # N·∫øu ch∆∞a cung c·∫•p l·ª£i nhu·∫≠n, t√≠nh l·ª£i nhu·∫≠n
            if current_profit == 0.0:
                if side == "long":
                    current_profit = (current_price / entry_price - 1) * 100
                else:  # short
                    current_profit = (entry_price / current_price - 1) * 100
            
            # M·∫∑c ƒë·ªãnh kh√¥ng tho√°t
            exit_recommendation = "hold"
            reason = "Ch∆∞a ƒë·∫°t ƒëi·ªÅu ki·ªán tho√°t l·ªánh"
            
            # Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán tho√°t
            
            # 1. N·∫øu l·ª£i nhu·∫≠n ƒë√£ ƒë·∫°t m·ª•c ti√™u b·∫£o v·ªá (3%)
            if current_profit >= 3.0:
                exit_recommendation = "exit_full"
                reason = f"ƒê√£ ƒë·∫°t m·ª•c ti√™u l·ª£i nhu·∫≠n 3% (th·ª±c t·∫ø: {current_profit:.2f}%)"
            
            # 2. Tho√°t m·ªôt ph·∫ßn n·∫øu ƒë√£ c√≥ l·ª£i nhu·∫≠n kh√° (2%)
            elif current_profit >= 2.0:
                exit_recommendation = "exit_partial"
                reason = f"ƒê√£ ƒë·∫°t l·ª£i nhu·∫≠n 2%, khuy·∫øn ngh·ªã ch·ªët m·ªôt ph·∫ßn (th·ª±c t·∫ø: {current_profit:.2f}%)"
            
            # 3. Ki·ªÉm tra ch·ªâ b√°o k·ªπ thu·∫≠t (v√≠ d·ª• RSI)
            if side == "long":
                rsi = ta.RSI(dataframe['close'], timeperiod=14).iloc[-1]
                if rsi > 70 and current_profit > 0.5:
                    exit_recommendation = "exit_full"
                    reason = f"RSI overbought ({rsi:.2f}) khi c√≥ l·ª£i nhu·∫≠n {current_profit:.2f}%"
                
                # Ki·ªÉm tra xu h∆∞·ªõng gi·∫£m
                ema8 = ta.EMA(dataframe['close'], timeperiod=8).iloc[-1]
                ema21 = ta.EMA(dataframe['close'], timeperiod=21).iloc[-1]
                
                if ema8 < ema21 and current_profit > 1.0:
                    exit_recommendation = "exit_full"
                    reason = f"Xu h∆∞·ªõng ƒë√£ ƒë·∫£o chi·ªÅu (EMA8 < EMA21) khi c√≥ l·ª£i nhu·∫≠n {current_profit:.2f}%"
                
            else:  # short
                rsi = ta.RSI(dataframe['close'], timeperiod=14).iloc[-1]
                if rsi < 30 and current_profit > 0.5:
                    exit_recommendation = "exit_full"
                    reason = f"RSI oversold ({rsi:.2f}) khi c√≥ l·ª£i nhu·∫≠n {current_profit:.2f}%"
                
                # Ki·ªÉm tra xu h∆∞·ªõng tƒÉng
                ema8 = ta.EMA(dataframe['close'], timeperiod=8).iloc[-1]
                ema21 = ta.EMA(dataframe['close'], timeperiod=21).iloc[-1]
                
                if ema8 > ema21 and current_profit > 1.0:
                    exit_recommendation = "exit_full"
                    reason = f"Xu h∆∞·ªõng ƒë√£ ƒë·∫£o chi·ªÅu (EMA8 > EMA21) khi c√≥ l·ª£i nhu·∫≠n {current_profit:.2f}%"
            
            # 4. N·∫øu c√≥ l·ª£i nhu·∫≠n v√† ƒë√£ ƒë·∫°t m·ª•c ti√™u 3% h√†ng ng√†y
            if current_profit > 0.5 and state.daily_profit_pct >= state.daily_profit_target_pct:
                exit_recommendation = "exit_full"
                reason = f"ƒê√£ ƒë·∫°t m·ª•c ti√™u l·ª£i nhu·∫≠n h√†ng ng√†y {state.daily_profit_target_pct}%, ch·ªët l·ªùi {current_profit:.2f}% ƒë·ªÉ b·∫£o v·ªá v·ªën"
            
            return {
                "pair": pair,
                "timeframe": timeframe,
                "side": side,
                "entry_price": entry_price,
                "current_price": current_price,
                "current_profit": current_profit,
                "recommendation": exit_recommendation,
                "reason": reason
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y khuy·∫øn ngh·ªã tho√°t l·ªánh: {str(e)}")
            logger.exception(e)
            return {
                "pair": pair,
                "timeframe": timeframe,
                "side": side,
                "recommendation": "error",
                "error": str(e)
            }
    
    def simulate_trading_day(self, num_simulations=100):
        """
        M√¥ ph·ªèng m·ªôt ng√†y giao d·ªãch ƒë·ªÉ t√≠nh to√°n x√°c su·∫•t ƒë·∫°t m·ª•c ti√™u 3%
        
        Args:
            num_simulations: S·ªë l·∫ßn m√¥ ph·ªèng
            
        Returns:
            dict: K·∫øt qu·∫£ m√¥ ph·ªèng
        """
        try:
            results = []
            success_count = 0
            target_profit = state.daily_profit_target_pct
            
            for i in range(num_simulations):
                daily_profit = 0
                trades = 0
                max_trades = 20  # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng giao d·ªãch m·ªói ng√†y
                
                while daily_profit < target_profit and trades < max_trades:
                    # M√¥ ph·ªèng m·ªôt trade
                    # Gi·∫£ ƒë·ªãnh ph√¢n ph·ªëi l·ª£i nhu·∫≠n d·∫°ng chu·∫©n v·ªõi mean=0.5%, std=1.5%
                    trade_profit = np.random.normal(0.5, 1.5)
                    
                    # ƒê·∫∑t gi·ªõi h·∫°n stoploss -3%
                    if trade_profit < -3:
                        trade_profit = -3
                    
                    daily_profit += trade_profit
                    trades += 1
                
                # L∆∞u k·∫øt qu·∫£
                success = daily_profit >= target_profit
                results.append({
                    "daily_profit": daily_profit,
                    "trades": trades,
                    "success": success
                })
                
                if success:
                    success_count += 1
            
            # T√≠nh to√°n th·ªëng k√™
            success_rate = success_count / num_simulations * 100
            avg_trades_needed = np.mean([r["trades"] for r in results if r["success"]])
            avg_profit = np.mean([r["daily_profit"] for r in results])
            
            return {
                "success_rate": success_rate,
                "avg_trades_needed": avg_trades_needed,
                "avg_profit": avg_profit,
                "target_profit": target_profit,
                "simulations": num_simulations
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi m√¥ ph·ªèng ng√†y giao d·ªãch: {str(e)}")
            logger.exception(e)
            return {
                "error": str(e)
            }
    
    def track_completed_trade(self, trade_info):
        """
        Theo d√µi th√¥ng tin v·ªÅ m·ªôt giao d·ªãch ƒë√£ ho√†n th√†nh
        
        Args:
            trade_info: Th√¥ng tin giao d·ªãch (dictionary)
        """
        try:
            # C·∫≠p nh·∫≠t l·ª£i nhu·∫≠n h√†ng ng√†y
            profit_pct = trade_info.get('profit_pct', 0)
            state.update_daily_profit(profit_pct)
            
            # Th√™m giao d·ªãch v√†o danh s√°ch
            state.add_trade(trade_info)
            
            # Log th√¥ng tin
            logger.info(f"ƒê√£ ho√†n th√†nh giao d·ªãch {trade_info.get('pair')} v·ªõi l·ª£i nhu·∫≠n {profit_pct}%")
            logger.info(f"T·ªïng l·ª£i nhu·∫≠n h√¥m nay: {state.daily_profit_pct}% ({state.num_trades_today} giao d·ªãch)")
            
            # X√≥a c·∫∑p ti·ªÅn kh·ªèi danh s√°ch active n·∫øu c·∫ßn
            if trade_info.get('pair') in state.active_pairs:
                state.active_pairs.remove(trade_info.get('pair'))
            
        except Exception as e:
            logger.error(f"L·ªói khi theo d√µi giao d·ªãch ho√†n th√†nh: {str(e)}")
            logger.exception(e)
    
    def reset_daily_tracking(self):
        """Reset theo d√µi h√†ng ng√†y khi b·∫Øt ƒë·∫ßu ng√†y m·ªõi"""
        try:
            state.reset_daily_tracking()
            logger.info(f"ƒê√£ reset theo d√µi h√†ng ng√†y. M·ª•c ti√™u l·ª£i nhu·∫≠n: {state.daily_profit_target_pct}%")
            
        except Exception as e:
            logger.error(f"L·ªói khi reset theo d√µi h√†ng ng√†y: {str(e)}")
            logger.exception(e)
    
    def analyze_trade_history(self, trade_history=None):
        """
        Ph√¢n t√≠ch l·ªãch s·ª≠ giao d·ªãch ƒë·ªÉ c·∫£i thi·ªán chi·∫øn l∆∞·ª£c
        
        Args:
            trade_history: Danh s√°ch c√°c giao d·ªãch trong qu√° kh·ª©
            
        Returns:
            dict: K·∫øt qu·∫£ ph√¢n t√≠ch
        """
        try:
            # S·ª≠ d·ª•ng d·ªØ li·ªáu m√¥ ph·ªèng n·∫øu kh√¥ng c√≥ l·ªãch s·ª≠
            if trade_history is None:
                # Gi·∫£ l·∫≠p 100 giao d·ªãch
                np.random.seed(42)  # ƒê·ªÉ k·∫øt qu·∫£ c√≥ th·ªÉ t√°i t·∫°o
                profit_results = np.random.normal(0.5, 1.5, 100)  # mean 0.5%, std 1.5%
                
                # Gi·ªõi h·∫°n stoploss
                profit_results = np.clip(profit_results, -3, None)
                
                # T·∫°o chi ti·∫øt giao d·ªãch
                trade_history = []
                for i, profit in enumerate(profit_results):
                    # Random pair
                    pair = np.random.choice(["BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT", "ADA/USDT"])
                    
                    # Random timeframe
                    timeframe = np.random.choice(["5m", "15m", "1h", "4h"])
                    
                    # Random side
                    side = np.random.choice(["long", "short"])
                    
                    trade_history.append({
                        "id": i,
                        "pair": pair,
                        "timeframe": timeframe,
                        "side": side,
                        "profit_pct": profit,
                        "open_date": datetime.now() - timedelta(days=np.random.randint(1, 30)),
                        "close_date": datetime.now() - timedelta(days=np.random.randint(0, 29))
                    })
            
            # Chuy·ªÉn ƒë·ªïi th√†nh DataFrame
            df = pd.DataFrame(trade_history)
            
            # Th·ªëng k√™ c∆° b·∫£n
            total_trades = len(df)
            winning_trades = len(df[df['profit_pct'] > 0])
            losing_trades = len(df[df['profit_pct'] <= 0])
            win_rate = winning_trades / total_trades * 100
            
            avg_profit = df['profit_pct'].mean()
            avg_win = df[df['profit_pct'] > 0]['profit_pct'].mean()
            avg_loss = df[df['profit_pct'] <= 0]['profit_pct'].mean()
            
            # Profit factor
            profit_factor = abs(df[df['profit_pct'] > 0]['profit_pct'].sum() / df[df['profit_pct'] <= 0]['profit_pct'].sum()) if df[df['profit_pct'] <= 0]['profit_pct'].sum() != 0 else float('inf')
            
            # Ph√¢n t√≠ch theo c·∫∑p ti·ªÅn
            pair_performance = df.groupby('pair')['profit_pct'].agg(['mean', 'count']).sort_values('mean', ascending=False)
            
            # Ph√¢n t√≠ch theo timeframe
            timeframe_performance = df.groupby('timeframe')['profit_pct'].agg(['mean', 'count']).sort_values('mean', ascending=False)
            
            # Ph√¢n t√≠ch theo side
            side_performance = df.groupby('side')['profit_pct'].agg(['mean', 'count']).sort_values('mean', ascending=False)
            
            # T√≠nh s·ªë ng√†y giao d·ªãch th√†nh c√¥ng
            if 'open_date' in df.columns:
                df['open_date'] = pd.to_datetime(df['open_date'])
                df['date'] = df['open_date'].dt.date
                
                daily_profits = df.groupby('date')['profit_pct'].sum()
                successful_days = len(daily_profits[daily_profits >= state.daily_profit_target_pct])
                total_days = len(daily_profits)
                daily_success_rate = successful_days / total_days * 100 if total_days > 0 else 0
            else:
                daily_success_rate = "N/A"
            
            # ƒê·ªÅ xu·∫•t c·∫£i thi·ªán
            recommendations = []
            
            # ƒê·ªÅ xu·∫•t d·ª±a tr√™n win rate
            if win_rate < 50:
                recommendations.append("C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng t√≠n hi·ªáu v√†o l·ªánh ƒë·ªÉ tƒÉng win rate")
            
            # ƒê·ªÅ xu·∫•t d·ª±a tr√™n profit factor
            if profit_factor < 1.5:
                recommendations.append("C·∫£i thi·ªán t·ª∑ l·ªá R:R (Reward:Risk) b·∫±ng c√°ch gi·∫£m stoploss ho·∫∑c tƒÉng take profit")
            
            # ƒê·ªÅ xu·∫•t d·ª±a tr√™n pair performance
            best_pairs = pair_performance.head(3).index.tolist()
            worst_pairs = pair_performance.tail(3).index.tolist()
            
            recommendations.append(f"∆Øu ti√™n giao d·ªãch c√°c c·∫∑p hi·ªáu qu·∫£ nh·∫•t: {', '.join(best_pairs)}")
            recommendations.append(f"H·∫°n ch·∫ø ho·∫∑c c·∫£i thi·ªán chi·∫øn l∆∞·ª£c cho c√°c c·∫∑p k√©m hi·ªáu qu·∫£: {', '.join(worst_pairs)}")
            
            # ƒê·ªÅ xu·∫•t d·ª±a tr√™n timeframe performance
            best_timeframes = timeframe_performance.head(2).index.tolist()
            recommendations.append(f"T·∫≠p trung v√†o c√°c khung th·ªùi gian hi·ªáu qu·∫£ nh·∫•t: {', '.join(best_timeframes)}")
            
            return {
                "total_trades": total_trades,
                "winning_trades": winning_trades,
                "losing_trades": losing_trades,
                "win_rate": win_rate,
                "avg_profit": avg_profit,
                "avg_win": avg_win,
                "avg_loss": avg_loss,
                "profit_factor": profit_factor,
                "pair_performance": pair_performance.to_dict(),
                "timeframe_performance": timeframe_performance.to_dict(),
                "side_performance": side_performance.to_dict(),
                "daily_target_success_rate": daily_success_rate,
                "recommendations": recommendations
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch l·ªãch s·ª≠ giao d·ªãch: {str(e)}")
            logger.exception(e)
            return {
                "error": str(e)
            }
    
    def predict_profit_potential(self, capital=1000, days=30):
        """
        D·ª± ƒëo√°n ti·ªÅm nƒÉng l·ª£i nhu·∫≠n trong m·ªôt kho·∫£ng th·ªùi gian d·ª±a tr√™n d·ªØ li·ªáu qu√° kh·ª©
        
        Args:
            capital: V·ªën ban ƒë·∫ßu
            days: S·ªë ng√†y d·ª± ƒëo√°n
            
        Returns:
            dict: K·∫øt qu·∫£ d·ª± ƒëo√°n
        """
        try:
            # Ph√¢n t√≠ch l·ªãch s·ª≠ giao d·ªãch
            history_analysis = self.analyze_trade_history()
            
            # M√¥ ph·ªèng ng√†y giao d·ªãch
            day_simulation = self.simulate_trading_day(num_simulations=500)
            
            # T·ª∑ l·ªá ng√†y th√†nh c√¥ng
            day_success_rate = day_simulation['success_rate'] / 100
            
            # T√≠nh to√°n compound
            daily_return = state.daily_profit_target_pct / 100
            compound_factor = (1 + daily_return) ** (day_success_rate * days)
            expected_capital = capital * compound_factor
            
            # T√≠nh l·ª£i nhu·∫≠n d·ª± ki·∫øn
            expected_profit = expected_capital - capital
            expected_profit_pct = (expected_profit / capital) * 100
            
            # T·∫°o b·∫£ng d·ª± b√°o theo ng√†y
            daily_projection = []
            current_capital = capital
            
            for day in range(1, days + 1):
                # X√°c su·∫•t th√†nh c√¥ng trong ng√†y
                success = np.random.random() < day_success_rate
                
                if success:
                    day_profit_pct = daily_return * 100
                    day_profit = current_capital * daily_return
                else:
                    # Ng√†y th·∫•t b·∫°i, gi·∫£ ƒë·ªãnh l·ª£i nhu·∫≠n 0%
                    day_profit_pct = 0
                    day_profit = 0
                
                current_capital += day_profit
                
                daily_projection.append({
                    "day": day,
                    "success": success,
                    "profit_pct": day_profit_pct,
                    "profit": day_profit,
                    "capital": current_capital
                })
            
            return {
                "initial_capital": capital,
                "prediction_days": days,
                "day_success_rate": day_success_rate * 100,
                "expected_capital": expected_capital,
                "expected_profit": expected_profit,
                "expected_profit_pct": expected_profit_pct,
                "daily_projection": daily_projection,
                "history_analysis": history_analysis,
                "day_simulation": day_simulation
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi d·ª± ƒëo√°n ti·ªÅm nƒÉng l·ª£i nhu·∫≠n: {str(e)}")
            logger.exception(e)
            return {
                "error": str(e)
            }
    
    def analyze_with_openai_gpt(self, trade_data, prompt_type="trade_analysis"):
        """
        S·ª≠ d·ª•ng OpenAI API ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu giao d·ªãch v√† cung c·∫•p insight
        
        Args:
            trade_data: D·ªØ li·ªáu giao d·ªãch c·∫ßn ph√¢n t√≠ch
            prompt_type: Lo·∫°i ph√¢n t√≠ch c·∫ßn th·ª±c hi·ªán
            
        Returns:
            dict: K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ GPT
        """
        try:
            # Ki·ªÉm tra API key
            openai_api_key = os.getenv("OPENAI_API_KEY")
            if not openai_api_key:
                return {
                    "status": "error",
                    "message": "Kh√¥ng t√¨m th·∫•y OPENAI_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng"
                }
            
            # C·∫•u h√¨nh OpenAI API
            openai.api_key = openai_api_key
            
            # Chu·∫©n b·ªã prompt d·ª±a tr√™n lo·∫°i ph√¢n t√≠ch
            prompt = ""
            
            if prompt_type == "trade_analysis":
                # Ph√¢n t√≠ch giao d·ªãch
                prompt = f"""
                Ph√¢n t√≠ch d·ªØ li·ªáu giao d·ªãch sau v√† cung c·∫•p insight h·ªØu √≠ch:
                
                D·ªØ li·ªáu giao d·ªãch:
                {json.dumps(trade_data, indent=2)}
                
                H√£y ph√¢n t√≠ch:
                1. T·ª∑ l·ªá th·∫Øng/thua v√† l·ª£i nhu·∫≠n trung b√¨nh
                2. C·∫∑p ti·ªÅn n√†o hi·ªáu qu·∫£ nh·∫•t v√† k√©m nh·∫•t
                3. Khung th·ªùi gian n√†o c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t
                4. ƒê·ªÅ xu·∫•t c√°c lƒ©nh v·ª±c c·∫ßn c·∫£i thi·ªán
                5. Chi·∫øn l∆∞·ª£c ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u l·ª£i nhu·∫≠n 3% h√†ng ng√†y m·ªôt c√°ch nh·∫•t qu√°n
                
                Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ƒë·ªãnh d·∫°ng r√µ r√†ng d·ªÖ ƒë·ªçc.
                """
            
            elif prompt_type == "market_analysis":
                # Ph√¢n t√≠ch th·ªã tr∆∞·ªùng
                prompt = f"""
                Ph√¢n t√≠ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng sau v√† cung c·∫•p insight h·ªØu √≠ch:
                
                D·ªØ li·ªáu th·ªã tr∆∞·ªùng:
                {json.dumps(trade_data, indent=2)}
                
                H√£y ph√¢n t√≠ch:
                1. T√¨nh tr·∫°ng th·ªã tr∆∞·ªùng hi·ªán t·∫°i (trend, volatility)
                2. C√°c c·∫∑p ti·ªÅn c√≥ ti·ªÅm nƒÉng nh·∫•t trong ƒëi·ªÅu ki·ªán hi·ªán t·∫°i
                3. R·ªßi ro ch√≠nh v√† c√°ch gi·∫£m thi·ªÉu
                4. Chi·∫øn l∆∞·ª£c t·ªëi ∆∞u cho t√¨nh h√¨nh hi·ªán t·∫°i
                5. D·ª± b√°o ng·∫Øn h·∫°n (24-48 gi·ªù t·ªõi)
                
                Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ƒë·ªãnh d·∫°ng r√µ r√†ng d·ªÖ ƒë·ªçc.
                """
            
            elif prompt_type == "profit_optimization":
                # T·ªëi ∆∞u h√≥a l·ª£i nhu·∫≠n
                prompt = f"""
                Ph√¢n t√≠ch d·ªØ li·ªáu sau v√† ƒë·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c t·ªëi ∆∞u h√≥a ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u l·ª£i nhu·∫≠n 3% h√†ng ng√†y:
                
                D·ªØ li·ªáu:
                {json.dumps(trade_data, indent=2)}
                
                H√£y ph√¢n t√≠ch:
                1. ƒê√°nh gi√° t√¨nh tr·∫°ng hi·ªán t·∫°i so v·ªõi m·ª•c ti√™u 3%/ng√†y
                2. S·ªë l∆∞·ª£ng giao d·ªãch t·ªëi ∆∞u v√† l·ª£i nhu·∫≠n m·ª•c ti√™u m·ªói giao d·ªãch
                3. Ph√¢n b·ªï v·ªën v√† qu·∫£n l√Ω r·ªßi ro
                4. ƒêi·ªÅu ch·ªânh ƒë√≤n b·∫©y v√† position sizing
                5. K·∫ø ho·∫°ch h√†nh ƒë·ªông c·ª• th·ªÉ cho 24 gi·ªù t·ªõi
                
                Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ƒë·ªãnh d·∫°ng r√µ r√†ng d·ªÖ ƒë·ªçc.
                """
            
            else:
                # Prompt m·∫∑c ƒë·ªãnh
                prompt = f"""
                Ph√¢n t√≠ch d·ªØ li·ªáu sau v√† cung c·∫•p insight:
                
                {json.dumps(trade_data, indent=2)}
                
                Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ƒë·ªãnh d·∫°ng r√µ r√†ng d·ªÖ ƒë·ªçc.
                """
            
            # G·ªçi OpenAI API
            response = openai.ChatCompletion.create(
                model="gpt-4-0125-preview",  # S·ª≠ d·ª•ng model m·ªõi nh·∫•t
                messages=[
                    {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω ph√¢n t√≠ch giao d·ªãch crypto chuy√™n nghi·ªáp, gi·ªèi ph√¢n t√≠ch d·ªØ li·ªáu v√† ƒë∆∞a ra insight s√¢u s·∫Øc."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=2000,
                temperature=0.5
            )
            
            analysis = response.choices[0].message.content
            
            return {
                "status": "success",
                "analysis": analysis,
                "prompt_type": prompt_type
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch v·ªõi OpenAI GPT: {str(e)}")
            logger.exception(e)
            return {
                "status": "error",
                "message": str(e)
            }

def main():
    """H√†m main ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh"""
    try:
        logger.info("Kh·ªüi ƒë·ªông AI Profit Optimizer...")
        
        # Kh·ªüi t·∫°o optimizer
        optimizer = ProfitOptimizer()
        
        # Ph√¢n t√≠ch l·ª£i nhu·∫≠n c·∫ßn thi·∫øt
        analysis = optimizer.analyze_daily_profit_needed()
        logger.info(f"Ph√¢n t√≠ch l·ª£i nhu·∫≠n: {json.dumps(analysis, indent=2)}")
        
        # M√¥ ph·ªèng giao d·ªãch
        simulation = optimizer.simulate_trading_day(num_simulations=1000)
        logger.info(f"K·∫øt qu·∫£ m√¥ ph·ªèng: {json.dumps(simulation, indent=2)}")
        
        logger.info("AI Profit Optimizer ƒë√£ s·∫µn s√†ng.")
        
    except Exception as e:
        logger.error(f"L·ªói khi ch·∫°y AI Profit Optimizer: {str(e)}")
        logger.exception(e)

if __name__ == "__main__":
    main()